Index: tools/rosconsole/src/rosconsole/rosconsole.cpp
===================================================================
--- tools/rosconsole/src/rosconsole/rosconsole.cpp	(revision 14716)
+++ tools/rosconsole/src/rosconsole/rosconsole.cpp	(working copy)
@@ -539,68 +539,68 @@
 void print(FilterBase* filter, log4cxx::Logger* logger, Level level, 
 	   const char* file, int line, const char* function, const char* fmt, ...)
 {
-  if (g_shutting_down)
-    return;
-
-  if (g_printing_thread_id == boost::this_thread::get_id())
-  {
-    fprintf(stderr, "Warning: recursive print statement has occurred.  Throwing out recursive print.\n");
-    return;
-  }
-
-  boost::mutex::scoped_lock lock(g_print_mutex);
-
-  g_printing_thread_id = boost::this_thread::get_id();
-
-  va_list args;
-  va_start(args, fmt);
-
-  vformatToBuffer(g_print_buffer, g_print_buffer_size, fmt, args);
-
-  va_end(args);
-
-  log4cxx::LoggerPtr logger_ptr(logger);
-  bool enabled = true;
-
-  if (filter)
-  {
-    FilterParams params;
-    params.file = file;
-    params.function = function;
-    params.line = line;
-    params.level = level;
-    params.logger = logger_ptr;
-    params.message = g_print_buffer.get();
-    enabled = filter->isEnabled(params);
-    logger_ptr = params.logger;
-    level = params.level;
-
-    if (!params.out_message.empty())
-    {
-      size_t msg_size = params.out_message.size();
-      if (g_print_buffer_size <= msg_size)
-      {
-        g_print_buffer_size = msg_size + 1;
-        g_print_buffer.reset(new char[g_print_buffer_size]);
-      }
-
-      memcpy(g_print_buffer.get(), params.out_message.c_str(), msg_size + 1);
-    }
-  }
-
-  if (enabled)
-  {
-    try
-    {
-      logger_ptr->forcedLog(g_level_lookup[level], g_print_buffer.get(), log4cxx::spi::LocationInfo(file, function, line));
-    }
-    catch (std::exception& e)
-    {
-      fprintf(stderr, "Caught exception while logging: [%s]\n", e.what());
-    }
-  }
-
-  g_printing_thread_id = boost::thread::id();
+  // if (g_shutting_down)
+  //     return;
+  // 
+  //   if (g_printing_thread_id == boost::this_thread::get_id())
+  //   {
+  //     fprintf(stderr, "Warning: recursive print statement has occurred.  Throwing out recursive print.\n");
+  //     return;
+  //   }
+  // 
+  //   boost::mutex::scoped_lock lock(g_print_mutex);
+  // 
+  //   g_printing_thread_id = boost::this_thread::get_id();
+  // 
+  //   va_list args;
+  //   va_start(args, fmt);
+  // 
+  //   vformatToBuffer(g_print_buffer, g_print_buffer_size, fmt, args);
+  // 
+  //   va_end(args);
+  // 
+  //   log4cxx::LoggerPtr logger_ptr(logger);
+  //   bool enabled = true;
+  // 
+  //   if (filter)
+  //   {
+  //     FilterParams params;
+  //     params.file = file;
+  //     params.function = function;
+  //     params.line = line;
+  //     params.level = level;
+  //     params.logger = logger_ptr;
+  //     params.message = g_print_buffer.get();
+  //     enabled = filter->isEnabled(params);
+  //     logger_ptr = params.logger;
+  //     level = params.level;
+  // 
+  //     if (!params.out_message.empty())
+  //     {
+  //       size_t msg_size = params.out_message.size();
+  //       if (g_print_buffer_size <= msg_size)
+  //       {
+  //         g_print_buffer_size = msg_size + 1;
+  //         g_print_buffer.reset(new char[g_print_buffer_size]);
+  //       }
+  // 
+  //       memcpy(g_print_buffer.get(), params.out_message.c_str(), msg_size + 1);
+  //     }
+  //   }
+  // 
+  //   if (enabled)
+  //   {
+  //     try
+  //     {
+  //       logger_ptr->forcedLog(g_level_lookup[level], g_print_buffer.get(), log4cxx::spi::LocationInfo(file, function, line));
+  //     }
+  //     catch (std::exception& e)
+  //     {
+  //       fprintf(stderr, "Caught exception while logging: [%s]\n", e.what());
+  //     }
+  //   }
+  // 
+  //   g_printing_thread_id = boost::thread::id();
 }
 
 void print(FilterBase* filter, log4cxx::Logger* logger, Level level, 
Index: clients/roslisp/asdf/roslisp-utils.asd
===================================================================
--- clients/roslisp/asdf/roslisp-utils.asd	(revision 14716)
+++ clients/roslisp/asdf/roslisp-utils.asd	(working copy)
@@ -1 +1,10 @@
-link ../utils/roslisp-utils.asd
\ No newline at end of file
+
+(defsystem :roslisp-utils
+  :name "roslisp-utils"
+
+  :components
+  ((:file "utils")
+   (:file "float-bytes")
+   (:file "extended-reals")
+   (:file "queue" :depends-on ("utils" "extended-reals"))
+   (:file "hash-utils" :depends-on ("utils"))))
Index: clients/roslisp/asdf/roslisp.asd
===================================================================
--- clients/roslisp/asdf/roslisp.asd	(revision 14716)
+++ clients/roslisp/asdf/roslisp.asd	(working copy)
@@ -1 +1,37 @@
-link ../src/roslisp.asd
\ No newline at end of file
+;;;; -*- Mode: LISP -*-
+
+
+(in-package :asdf)
+
+(defsystem :roslisp
+  :name "roslisp"
+
+  :components
+  ((:file "roslisp")
+   (:file "rosutils" :depends-on ("roslisp"))
+   (:file "master" :depends-on ("rosutils"))
+   (:file "rosout-codegen" :depends-on ("msg" "rosutils"))
+   (:file "rosout" :depends-on ("rosout-codegen"))
+   (:file "time" :depends-on ("rosutils" "rosout"))
+   (:file "namespace" :depends-on ("roslisp"))
+   (:file "msg" :depends-on ("roslisp" "rosutils"))
+   (:file "msg-header" :depends-on ("msg" "rosout" "time"))
+   (:file "params" :depends-on ("namespace" "rosutils" "roslisp" "rosout" "master"))
+   (:file "tcpros" :depends-on ("roslisp" "msg" "rosout" "msg-serialization-stream"))
+   (:file "sockets" :depends-on ("roslisp" "rosout"))
+   (:file "slave" :depends-on ("sockets" "tcpros" "rosout"))
+   (:file "command-line-args" :depends-on ("roslisp" "rosout" "namespace"))
+   (:file "client" :depends-on ("sockets" "namespace" "command-line-args" "msg" "rosout" "master"))
+   (:file "debug-levels" :depends-on ("params" "client" "rosout"))
+   (:file "node" :depends-on ("client"))
+   (:file "msg-serialization-stream" :depends-on ("roslisp"))
+   (:file "pprint" :depends-on ("rosout" "msg"))
+   )
+	  
+
+  :depends-on (:s-xml :s-xml-rpc :sb-bsd-sockets
+               :rosgraph_msgs-msg :roslisp-msg-protocol
+               :ros-load-manifest
+               :roslisp-utils :std_srvs-srv))
+
+;;;; eof
Index: clients/roslisp/asdf/roslisp-msg-protocol.asd
===================================================================
--- clients/roslisp/asdf/roslisp-msg-protocol.asd	(revision 14716)
+++ clients/roslisp/asdf/roslisp-msg-protocol.asd	(working copy)
@@ -1 +1,11 @@
-link ../roslisp-msg-protocol/roslisp-msg-protocol.asd
\ No newline at end of file
+
+(in-package :asdf)
+
+(defsystem :roslisp-msg-protocol
+  :name "roslisp-msg"
+
+  :serial t
+  :components
+  ((:file "package")
+   (:file "msg-protocol")))
+
Index: clients/roslisp/asdf/s-xml.asd
===================================================================
--- clients/roslisp/asdf/s-xml.asd	(revision 14716)
+++ clients/roslisp/asdf/s-xml.asd	(working copy)
@@ -1 +1,34 @@
-link ../s-xml/s-xml.asd
\ No newline at end of file
+;;;; -*- Mode: LISP -*-
+;;;;
+;;;; $Id: s-xml.asd,v 1.2 2005/12/14 21:49:04 scaekenberghe Exp $
+;;;;
+;;;; The S-XML ASDF system definition
+;;;;
+;;;; Copyright (C) 2002, 2004 Sven Van Caekenberghe, Beta Nine BVBA.
+;;;;
+;;;; You are granted the rights to distribute and use this software
+;;;; as governed by the terms of the Lisp Lesser General Public License
+;;;; (http://opensource.franz.com/preamble.html), also known as the LLGPL.
+
+(in-package :asdf)
+
+(defsystem :s-xml
+  :name "S-XML"
+  :author "Sven Van Caekenberghe <svc@mac.com>"
+  :version "3"
+  :maintainer "Sven Van Caekenberghe <svc@mac.com>, Brian Mastenbrook <>, Rudi Schlatte <>"
+  :licence "Lisp Lesser General Public License (LLGPL)"
+  :description "Simple Common Lisp XML Parser"
+  :long-description "S-XML is a Common Lisp implementation of a simple XML parser, with a SAX-like and DOM interface"
+
+  :components
+  ((:module
+    :src
+    :components ((:file "package")
+                 (:file "xml" :depends-on ("package"))
+                 (:file "dom" :depends-on ("package" "xml"))
+                 (:file "lxml-dom" :depends-on ("dom"))
+                 (:file "sxml-dom" :depends-on ("dom"))
+                 (:file "xml-struct-dom" :depends-on ("dom"))))))
+
+;;;; eof
Index: clients/roslisp/asdf/s-xml-rpc.asd
===================================================================
--- clients/roslisp/asdf/s-xml-rpc.asd	(revision 14716)
+++ clients/roslisp/asdf/s-xml-rpc.asd	(working copy)
@@ -1 +1,34 @@
-link ../s-xml-rpc/s-xml-rpc.asd
\ No newline at end of file
+;;;; -*- Mode: LISP -*-
+;;;;
+;;;; $Id: s-xml-rpc.asd,v 1.2 2004/06/17 19:43:11 rschlatte Exp $
+;;;;
+;;;; The S-XML-RPC ASDF system definition
+;;;;
+;;;; Copyright (C) 2002, 2004 Sven Van Caekenberghe, Beta Nine BVBA.
+;;;;
+;;;; You are granted the rights to distribute and use this software
+;;;; as governed by the terms of the Lisp Lesser General Public License
+;;;; (http://opensource.franz.com/preamble.html), also known as the LLGPL.
+
+(in-package :asdf)
+
+(defsystem :s-xml-rpc
+  :name "S-XML-RPC"
+  :author "Sven Van Caekenberghe <svc@mac.com>"
+  :version "7"
+  :maintainer "Sven Van Caekenberghe <svc@mac.com>, Brian Mastenbrook <>, Rudi Schlatte <>"
+  :licence "Lesser Lisp General Public License (LLGPL)"
+  :description "Common Lisp XML-RPC Package"
+  :long-description "s-xml-rpc is a Common Lisp implementation of the XML-RPC procotol for both client and server"
+
+  :components
+  ((:module
+    :src 
+    :components ((:file "base64")
+                 (:file "package" :depends-on ("base64"))
+                 (:file "sysdeps" :depends-on ("package"))
+                 (:file "xml-rpc" :depends-on ("package" "sysdeps" "base64"))
+                 (:file "extensions" :depends-on ("package" "xml-rpc")))))
+  :depends-on (:s-xml #+sbcl :sb-bsd-sockets))
+
+;;;; eof
Index: clients/roslisp/asdf/ros-load-manifest.asd
===================================================================
--- clients/roslisp/asdf/ros-load-manifest.asd	(revision 14716)
+++ clients/roslisp/asdf/ros-load-manifest.asd	(working copy)
@@ -1 +1,64 @@
-link ../load-manifest/ros-load-manifest.asd
\ No newline at end of file
+;;;; -*- Mode: LISP -*-
+
+;;; We always compile ros-load-manifest into ros-home since it is part
+;;; of the roslisp bootstrapping process.
+
+(defclass ros-cl-source-file (cl-source-file) ())
+
+(defun ros-home ()
+  (or (sb-ext:posix-getenv "ROS_HOME")
+      (merge-pathnames (make-pathname :directory '(:relative ".ros"))
+                       (user-homedir-pathname))))
+
+(defmethod output-files ((operation asdf:compile-op) (c ros-cl-source-file))
+  (labels ((find-system (c)
+             "Returns the system of a component."
+             (typecase c
+               (asdf:system c)
+               (asdf:component (find-system (asdf:component-parent c)))))
+           (find-pkg-path (path &optional traversed)
+             "Traverses the `path' upwards until it finds a manifest.
+              Returns two values, the name of the ros package and the
+              relative part of path inside the package. Throws an
+              error if it cannot find the manifest."
+             (let ((manifest (probe-file (merge-pathnames "manifest.xml" path))))
+               (if manifest
+                   (values (truename path) traversed)
+                   (find-pkg-path (make-pathname :directory (butlast (pathname-directory path)))
+                                  (cons (car (last (pathname-directory path)))
+                                        traversed)))))
+           (system-ros-name (system)
+             "Returns the ros package name of a system."
+             (multiple-value-bind (package-path rel-path)
+                 (find-pkg-path (asdf:component-pathname system))
+               (assert (eq (car (pathname-directory package-path)) :absolute))
+               (values (car (last (pathname-directory package-path))) rel-path)))
+           (pathname-rel-subdir (p1 p2)
+             "returns the relative path of `p2' in `p1'."
+             (loop with result = (pathname-directory  (truename p2))
+                   for d1 in (pathname-directory (truename p1))
+                   do (setf result (cdr result))
+                   finally (return result))))
+    (let ((system (find-system c))
+          (component-path (asdf:component-pathname c)))
+      (multiple-value-bind (package-name rel-path)
+          (system-ros-name system)
+        (list
+         (asdf::compile-file-pathname
+          (merge-pathnames (make-pathname :name (pathname-name component-path)
+                                          :type (pathname-type component-path)
+                                          :directory `(:relative ,@(pathname-rel-subdir
+                                                                    (asdf:component-pathname system)
+                                                                    component-path)))
+                           (merge-pathnames
+                            (make-pathname :directory `(:relative "roslisp" ,package-name ,@rel-path))
+                            (ros-home)))))))))
+
+(defsystem :ros-load-manifest
+  :name "ros-load-manifest"
+  :default-component-class ros-cl-source-file
+  :components
+  ((:file "load-manifest"))
+  :depends-on (:sb-posix))
+
+;;;; eof
Index: stack.xml
===================================================================
--- stack.xml	(revision 14716)
+++ stack.xml	(working copy)
@@ -5,5 +5,6 @@
   <review status="doc reviewed" notes="REP 100"/>
   <url>http://ros.org/wiki/ros_comm</url>
   <depend stack="ros" /> <!-- rosclean, roslang, roslib, rosunit -->
+  <rosdep name="gfortran" />
 
 </stack>
Index: rosdep.yaml
===================================================================
--- rosdep.yaml	(revision 14716)
+++ rosdep.yaml	(working copy)
@@ -6,6 +6,10 @@
   fedora: apr-devel apr-util
   rhel: apr-devel apr-util
   macports: apr apr-util
+  osx:
+    lion:
+      homebrew:
+        packages: |
   gentoo: dev-libs/apr dev-libs/apr-util
   cygwin: libapr1 libaprutil1
   freebsd: builtin # i.e. ignore, only needed to manually build log4cxx on other OSes
@@ -41,6 +45,11 @@
   arch: |
     if ! pacman -Q log4cxx; then yaourt -S log4cxx; fi
   macports: log4cxx
+  osx:
+    lion:
+      homebrew:
+        packages: [ log4cxx ]
+        args: [ --universal ]
   gentoo: dev-libs/log4cxx
   cygwin: liblog4cxx-devel
   freebsd: log4cxx
@@ -52,6 +61,10 @@
   rhel: python-imaging
   arch: python-imaging
   macports: py26-pil
+  osx:
+    lion:
+      homebrew:
+        packages: [ pil ]
   gentoo: dev-python/imaging
   freebsd: py27-imaging
 python-numpy:
@@ -62,6 +75,10 @@
   rhel: python-numpy
   arch: python2-numpy
   macports: py26-numpy
+  osx:
+    lion:
+      pip:
+        packages: [ numpy ]
   gentoo: dev-python/numpy
   freebsd: py-numpy
 python-matplotlib:
@@ -69,6 +86,11 @@
   arch: python-matplotlib
   debian: python-matplotlib
   macports: py26-matplotlib
+  osx:
+    lion:
+      pip:
+        packages: [ matplotlib ]
+        alt_install_cmd: '-e git+https://github.com/matplotlib/matplotlib#egg=matplotlib-dev'
   opensuse: python-matplotlib
   fedora: python-matplotlib
   rhel: python-matplotlib
@@ -80,6 +102,10 @@
   opensuse: python-paramiko 
   fedora: python-paramiko
   macports: py26-paramiko
+  osx:
+    lion:
+      pip:
+        packages: [ paramiko ]
   gentoo: dev-python/paramiko
   freebsd: py27-paramiko
-  arch: python-paramiko 
\ No newline at end of file
+  arch: python-paramiko
