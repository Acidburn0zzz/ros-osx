Index: tools/rosdep/src/rosdep/core.py
===================================================================
--- tools/rosdep/src/rosdep/core.py	(revision 14667)
+++ tools/rosdep/src/rosdep/core.py	(working copy)
@@ -89,13 +89,13 @@
                 f.close()
                 self._yaml_cache[path] = yaml.load(yaml_text)
                 return self._yaml_cache[path]
-
+            
             except yaml.YAMLError, exc:
                 print >> sys.stderr, "Failed parsing yaml while processing %s\n"%path, exc
                 #sys.exit(1)        # not a breaking error
         self._yaml_cache[path] = {}
         return {}
-
+    
     def get_rosstack_depends(self, stack):
         """ A caching query to get rosstack_depends(stack) """
         if stack in self._rosstack_depends_cache:
@@ -108,7 +108,7 @@
         """ Get the rosdeps for the active os"""
         if path in self._expanded_rosdeps:
             return self._expanded_rosdeps[path]
-
+            
         yaml_dict = self.get_yaml(path)
         expanded_rosdeps = {}
         if not yaml_dict: # prevent exception below if rosdep.yaml file was empty #2762
@@ -121,7 +121,7 @@
             expanded_rosdeps[key] = rosdep_entry
         self._expanded_rosdeps[path] = expanded_rosdeps
         return expanded_rosdeps
-
+    
     def get_os_from_yaml(self, rosdep_name, yaml_map, source_path): #source_path is for debugging where errors come from
         """
         @return The os (and version specific if required ) local package name
@@ -136,8 +136,7 @@
         else:
             #print >> sys.stderr, "failed to resolve a rule for rosdep(%s) on OS(%s)"%(rosdep_name, self.os_name)
             return False
-
-
+    
     def get_version_from_yaml(self, rosdep_name, os_specific, source_path):
         """
         Helper function for get_os_from_yaml to parse if version is required.  
@@ -147,7 +146,7 @@
         # This is a map to provide backwards compatability for rep111 changes.  
         # See http://www.ros.org/reps/rep-0111.html for more info. 
         rep111version_map = {'lucid':'10.04', 'maverick':'10.10', 'natty':'11.04'}
-
+        
         if type(os_specific) == type("String"): # It's just a single string 
             return os_specific
         if self.os_version in os_specific: # if it is a version key, just return it
@@ -357,13 +356,11 @@
         rp = roslib.packages.ROSPackages()
         self.rosdeps = rp.rosdeps(packages)
         self.robust = robust
-        
-
+    
     def get_rosdep0(self, package):
         m = roslib.manifest.load_manifest(package)
         return [d.name for d in m.rosdeps]
-            
-
+    
     def get_rosdeps(self, packages):
         """
         @return: dictionary mapping rosdep names to list of packages
@@ -414,26 +411,25 @@
                     scripts.append(specific)
             else:
                 failed_rosdeps.append(r)
-
+        
         if len(failed_rosdeps) > 0:
             if not self.robust:
                 raise RosdepException("ABORTING: Rosdeps %s could not be resolved"%failed_rosdeps)
             else:
                 print >> sys.stderr, "WARNING: Rosdeps %s could not be resolved"%failed_rosdeps
-
+        
         time_delta = (time.time() - start_time)
         if "ROSDEP_DEBUG" in os.environ:
             print "Done loading rosdeps in %f seconds, averaging %f per rosdep."%(time_delta, time_delta/len(self.packages))
-
-        return (list(set(native_packages)), list(set(scripts)))
         
-
+        return (list(set(native_packages)), list(set(scripts)))
+    
     def satisfy(self):
         """ 
         return a list of failed rosdeps and print what would have been done to install them
         """
         return self.check(display = True)
-
+    
     def check(self, display = False):
         """ 
         Return a list of failed rosdeps
@@ -461,7 +457,7 @@
                 rdlp = RosdepLookupPackage(self.osi.get_name(), self.osi.get_version(), p, self.yc)
                 rdlp_cache[p] = rdlp
             if not self.install_rosdep(r, rdlp, default_yes=False, execute=False, display=display):
-                failed_rosdeps.append(r)
+                failed_rosdeps.append(r.encode('utf-8'))
 
         return failed_rosdeps
 
Index: tools/rosdep/src/rosdep/osx.py
===================================================================
--- tools/rosdep/src/rosdep/osx.py	(revision 14667)
+++ tools/rosdep/src/rosdep/osx.py	(working copy)
@@ -46,16 +46,19 @@
     def __init__(self):
         self.installers = {}
         self.installers['pip'] = rosdep.installers.PipInstaller
-        self.installers['macports'] = rosdep.installers.MacportsInstaller
-        self.installers['default'] = rosdep.installers.MacportsInstaller
+        # self.installers['macports'] = rosdep.installers.MacportsInstaller
+        # self.installers['default'] = rosdep.installers.MacportsInstaller
+        self.installers['homebrew'] = rosdep.installers.HomebrewInstaller
+        self.installers['default'] = rosdep.installers.HomebrewInstaller
         self.installers['source'] = rosdep.installers.SourceInstaller
-
+    
     def strip_detected_packages(self, packages):
         return [p for p in packages if not port_detect(p)] 
-
-    def generate_package_install_command(self, packages, default_yes):        
+    
+    def generate_package_install_command(self, packages, default_yes):
         if len(packages) < 1:
             return "#No packages to install"
         return "#Packages\nsudo port install " + ' '.join(packages)
+    
 
 ###### END Osx SPECIALIZATION ########################
Index: tools/rosdep/src/rosdep/installers.py
===================================================================
--- tools/rosdep/src/rosdep/installers.py	(revision 14667)
+++ tools/rosdep/src/rosdep/installers.py	(working copy)
@@ -28,6 +28,8 @@
 
 # Author Tully Foote/tfoote@willowgarage.com
 
+from __future__ import print_function
+
 import subprocess
 import os.path 
 import roslib.os_detect
@@ -114,7 +116,7 @@
 
         #TODO add md5sum verification
         if "ROSDEP_DEBUG" in os.environ:
-            print "Downloading manifest %s"%self.url
+            print("Downloading manifest %s"%self.url)
 
         error = ''
 
@@ -125,7 +127,7 @@
             contents = fetch_file(self.url, self.md5sum)
         except rosdep.core.RosdepException, ex:
             if "ROSDEP_DEBUG" in os.environ:
-                print "Failed to fetch file %s for reason %s"%(self.url, ex)
+                print("Failed to fetch file %s for reason %s"%(self.url, ex))
 
 
         if not contents: # try the backup url
@@ -135,7 +137,7 @@
                 contents = fetch_file(self.alt_url, self.md5sum)
             except rosdep.core.RosdepException, ex:
                 if "ROSDEP_DEBUG" in os.environ:
-                    print "Failed to fetch file %s for reason %s"%(self.alt_url, ex)
+                    print("Failed to fetch file %s for reason %s"%(self.alt_url, ex))
 
         if not contents:
             raise rosdep.core.RosdepException("Failed to load a rdmanifest from either %s or %s"%(self.url, self.alt_url))
@@ -149,7 +151,7 @@
         
                 
         if "ROSDEP_DEBUG" in os.environ:
-            print "Downloaded manifest:\n{{{%s\n}}}\n"%self.manifest
+            print("Downloaded manifest:\n{{{%s\n}}}\n"%self.manifest)
         
         self.install_command = self.manifest.get("install-script", "#!/bin/bash\n#no install-script specificd")
         self.check_presence_command = self.manifest.get("check-presence-script", "#!/bin/bash\n#no check-presence-script\nfalse")
@@ -174,7 +176,7 @@
         success = False
 
         if "ROSDEP_DEBUG" in os.environ:
-            print "Fetching %s"%self.tarball
+            print("Fetching %s"%self.tarball)
         f = urllib.urlretrieve(self.tarball)
         filename = f[0]
         if self.tarball_md5sum:
@@ -192,7 +194,7 @@
             
         else:
             if "ROSDEP_DEBUG" in os.environ:
-                print "No md5sum defined for tarball, not checking."
+                print("No md5sum defined for tarball, not checking.")
             
         try:
             tarf = tarfile.open(filename)
@@ -200,10 +202,10 @@
 
             if execute:
                 if "ROSDEP_DEBUG" in os.environ:
-                    print "Running installation script"
+                    print("Running installation script")
                 success = rosdep.core.create_tempfile_from_string_and_execute(self.install_command, os.path.join(tempdir, self.exec_path))
             elif display:
-                print "Would have executed\n{{{%s\n}}}"%self.install_command
+                print("Would have executed\n{{{%s\n}}}"%self.install_command)
             
         finally:
             shutil.rmtree(tempdir)
@@ -211,7 +213,7 @@
 
         if success:
             if "ROSDEP_DEBUG" in os.environ:
-                print "successfully executed script"
+                print("successfully executed script")
             return True
         return False
 
@@ -258,7 +260,7 @@
         if execute:
             return rosdep.core.create_tempfile_from_string_and_execute(script)
         elif display:
-            print "To install packages: %s would have executed script\n{{{\n%s\n}}}"%(packages_to_install, script)
+            print("To install packages: %s would have executed script\n{{{\n%s\n}}}"%(packages_to_install, script))
         return False
 
 
@@ -328,12 +330,12 @@
         #if default_yes:
         #    script = "#!/bin/bash\n#Packages %s\nsudo apt-get install -U "%packages_to_install + ' '.join(packages_to_install)        
         #else:
-        script =  "#!/bin/bash\n#Packages %s\nsudo pip install -U "%packages_to_install + ' '.join(packages_to_install)
+        script =  "#!/bin/bash\n#Packages %s\npip install -U "%packages_to_install + ' '.join(packages_to_install)
 
         if execute:
             return rosdep.core.create_tempfile_from_string_and_execute(script)
         elif display:
-            print "To install packages: %s would have executed script\n{{{\n%s\n}}}"%(packages_to_install, script)
+            print("To install packages: %s would have executed script\n{{{\n%s\n}}}"%(packages_to_install, script))
         return False
 
 
@@ -351,7 +353,7 @@
         pkg_list = std_out.split('\n')
         for pkg in pkg_list:
             pkg_row = pkg.split("==")
-            print pkg_row
+            # print(pkg_row)
             if pkg_row[0] in pkgs:
                 ret_list.append( pkg_row[0])
         return ret_list
@@ -365,6 +367,13 @@
         if type(packages) == type("string"):
             packages = packages.split()
 
+        try:
+            pop = subprocess.Popen(['port'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+        except OSError:
+            import traceback; traceback.print_exc()
+            print("There was an error running macports, make sure it is installed properly.", file=sys.stderr)
+            sys.exit(-1)
+
         self.packages = packages
 
     def get_packages_to_install(self):
@@ -378,12 +387,12 @@
         packages_to_install = self.get_packages_to_install()
         if not packages_to_install:
             script =  "#!/bin/bash\n#No Packages to install"
-        script = "#!/bin/bash\n#Packages %s\nsudo port install "%packages_to_install + ' '.join(packages_to_install)        
+        script = "#!/bin/bash\n#Packages %s\nsudo port install "%packages_to_install + ' '.join(packages_to_install)
 
         if execute:
             return rosdep.core.create_tempfile_from_string_and_execute(script)
         elif display:
-            print "To install packages: %s would have executed script\n{{{\n%s\n}}}"%(packages_to_install, script)
+            print("To install packages: %s would have executed script\n{{{\n%s\n}}}"%(packages_to_install, script))
         return False
 
     def port_detect(self, pkgs):
@@ -401,3 +410,51 @@
             if len(pkg_row) == 3 and pkg_row[0] in pkgs and pkg_row[2] =='(active)':
                 ret_list.append( pkg_row[0])
         return ret_list
+
+class HomebrewInstaller(InstallerAPI):
+    """An implementation of the InstallerAPI for use on homebrew systems."""
+    def __init__(self, arg_dict):
+        packages = arg_dict.get("packages", "")
+        if type(packages) == type("string"):
+            packages = packages.split()
+        try:
+            pop = subprocess.Popen(['brew'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+        except OSError:
+            import traceback; traceback.print_exc()
+            print("There was an error running homebrew, make sure it is installed properly.", file=sys.stderr)
+            sys.exit(-1)
+        self.packages = packages
+    
+    def get_packages_to_install(self):
+        return list(set(self.packages) - set(self.port_detect(self.packages)))
+    
+    def check_presence(self):
+        return len(self.get_packages_to_install()) == 0
+    
+    def generate_package_install_command(self, default_yes = False, execute = True, display = True):
+        script = '!#/bin/bash\n#no script'
+        packages_to_install = self.get_packages_to_install()
+        if not packages_to_install:
+            script =  "#!/bin/bash\n#No Packages to install"
+        script = "#!/bin/bash\n#Packages %s\nbrew install "%packages_to_install + ' '.join(packages_to_install)
+        
+        if execute:
+            return rosdep.core.create_tempfile_from_string_and_execute(script)
+        elif display:
+            print(("To install packages: %s would have executed script\n{{{\n%s\n}}}"%(packages_to_install, script)))
+        return False
+    
+    def port_detect(self, pkgs):
+        """ 
+        Given a list of package, return the list of installed packages.
+        """
+        ret_list = []
+        cmd = ['brew', 'list']
+        pop = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+        (std_out, std_err) = pop.communicate()
+        pkg_list = std_out.split()
+        for pkg in pkg_list:
+            if pkg in pkg:
+                ret_list.append(pkg)
+        return ret_list
+    
Index: rosdep.yaml
===================================================================
--- rosdep.yaml	(revision 14667)
+++ rosdep.yaml	(working copy)
@@ -13,6 +13,10 @@
   fedora: python-devel
   rhel: python-devel
   macports: python26 python_select
+  osx:
+    lion:
+      homebrew: 
+        packages: python
   gentoo: python
   cygwin: python
   freebsd: python
@@ -25,6 +29,10 @@
   centos: PyYAML
   arch: python-yaml
   macports: py26-yaml
+  osx:
+      lion:
+          pip: 
+              packages: PyYAML
   gentoo: pyyaml
   cygwin: |
       if [ ! -d /usr/lib/python2.5/site-packages/yaml/ ] ; then
@@ -40,6 +48,7 @@
   arch: pygtk
   debian: python-gtk2
   macports: py26-gtk
+  pip: pygtk
   opensuse: python-gtk
   fedora: pygtk2
   rhel: pygtk2
@@ -52,6 +61,7 @@
   opensuse: python-scipy
   fedora: scipy
   macports: py26-scipy
+  pip: scipy
   gentoo: dev-libs/scipy
   freebsd: py-scipy
 bzip2:
@@ -62,6 +72,10 @@
   rhel: bzip2-devel
   arch: bzip2
   macports: bzip2
+  osx:
+    lion:
+      homebrew: 
+        packages: |
   gentoo: app-arch/bzip2
   cygwin: bzip2
   freebsd: bzip2
@@ -105,6 +119,10 @@
   rhel: boost-devel
   arch: boost
   macports: boost
+  osx:
+    lion:
+      homebrew:
+        packages: boost
   gentoo: dev-libs/boost
   cygwin: libboost-devel libboost1.40
   freebsd: boost-python-libs
@@ -127,6 +145,10 @@
   rhel: graphviz
   arch: graphviz
   macports: graphviz
+  osx:
+    lion:
+      homebrew:
+        packages: graphviz
   gentoo: media-gfx/graphviz
   freebsd: graphviz
 wxwidgets:
@@ -168,6 +190,10 @@
   rhel: pkgconfig
   arch: pkg-config
   macports: pkgconfig
+  osx:
+    lion:
+      homebrew:
+        packages: pkg-config
   gentoo: dev-util/pkgconfig
   cygwin: pkg-config
   freebsd: pkg-config
@@ -248,6 +274,10 @@
   opensuse: gtest-devel 
   fedora: gtest-devel
   macports: google-test
+  osx:
+    lion:
+      source:
+        uri: https://github.com/wjwwood/ros-osx/raw/master/electric-lion-homebrew/sourcedeps/gtest.rdmanifest
+        md5sum: c3895d9888097394eb28dac5a9982380
   gentoo: dev-util/gtest
   freebsd: googletest
 autoconf:
