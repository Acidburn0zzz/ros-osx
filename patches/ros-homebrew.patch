Index: tools/rosdep/src/rosdep/osx.py
===================================================================
--- tools/rosdep/src/rosdep/osx.py	(revision 14667)
+++ tools/rosdep/src/rosdep/osx.py	(working copy)
@@ -46,8 +46,10 @@
     def __init__(self):
         self.installers = {}
         self.installers['pip'] = rosdep.installers.PipInstaller
-        self.installers['macports'] = rosdep.installers.MacportsInstaller
-        self.installers['default'] = rosdep.installers.MacportsInstaller
+        #self.installers['macports'] = rosdep.installers.MacportsInstaller
+        #self.installers['default'] = rosdep.installers.MacportsInstaller
+        self.installers['macports'] = rosdep.installers.HomebrewInstaller
+        self.installers['default'] = rosdep.installers.HomebrewInstaller
         self.installers['source'] = rosdep.installers.SourceInstaller
 
     def strip_detected_packages(self, packages):
Index: tools/rosdep/src/rosdep/installers.py
===================================================================
--- tools/rosdep/src/rosdep/installers.py	(revision 14667)
+++ tools/rosdep/src/rosdep/installers.py	(working copy)
@@ -28,6 +28,8 @@
 
 # Author Tully Foote/tfoote@willowgarage.com
 
+from __future__ import print_function
+
 import subprocess
 import os.path 
 import roslib.os_detect
@@ -114,7 +116,7 @@
 
         #TODO add md5sum verification
         if "ROSDEP_DEBUG" in os.environ:
-            print "Downloading manifest %s"%self.url
+            print("Downloading manifest %s"%self.url)
 
         error = ''
 
@@ -125,7 +127,7 @@
             contents = fetch_file(self.url, self.md5sum)
         except rosdep.core.RosdepException, ex:
             if "ROSDEP_DEBUG" in os.environ:
-                print "Failed to fetch file %s for reason %s"%(self.url, ex)
+                print("Failed to fetch file %s for reason %s"%(self.url, ex))
 
 
         if not contents: # try the backup url
@@ -135,7 +137,7 @@
                 contents = fetch_file(self.alt_url, self.md5sum)
             except rosdep.core.RosdepException, ex:
                 if "ROSDEP_DEBUG" in os.environ:
-                    print "Failed to fetch file %s for reason %s"%(self.alt_url, ex)
+                    print("Failed to fetch file %s for reason %s"%(self.alt_url, ex))
 
         if not contents:
             raise rosdep.core.RosdepException("Failed to load a rdmanifest from either %s or %s"%(self.url, self.alt_url))
@@ -149,7 +151,7 @@
         
                 
         if "ROSDEP_DEBUG" in os.environ:
-            print "Downloaded manifest:\n{{{%s\n}}}\n"%self.manifest
+            print("Downloaded manifest:\n{{{%s\n}}}\n"%self.manifest)
         
         self.install_command = self.manifest.get("install-script", "#!/bin/bash\n#no install-script specificd")
         self.check_presence_command = self.manifest.get("check-presence-script", "#!/bin/bash\n#no check-presence-script\nfalse")
@@ -174,7 +176,7 @@
         success = False
 
         if "ROSDEP_DEBUG" in os.environ:
-            print "Fetching %s"%self.tarball
+            print("Fetching %s"%self.tarball)
         f = urllib.urlretrieve(self.tarball)
         filename = f[0]
         if self.tarball_md5sum:
@@ -192,7 +194,7 @@
             
         else:
             if "ROSDEP_DEBUG" in os.environ:
-                print "No md5sum defined for tarball, not checking."
+                print("No md5sum defined for tarball, not checking.")
             
         try:
             tarf = tarfile.open(filename)
@@ -200,10 +202,10 @@
 
             if execute:
                 if "ROSDEP_DEBUG" in os.environ:
-                    print "Running installation script"
+                    print("Running installation script")
                 success = rosdep.core.create_tempfile_from_string_and_execute(self.install_command, os.path.join(tempdir, self.exec_path))
             elif display:
-                print "Would have executed\n{{{%s\n}}}"%self.install_command
+                print("Would have executed\n{{{%s\n}}}"%self.install_command)
             
         finally:
             shutil.rmtree(tempdir)
@@ -211,7 +213,7 @@
 
         if success:
             if "ROSDEP_DEBUG" in os.environ:
-                print "successfully executed script"
+                print("successfully executed script")
             return True
         return False
 
@@ -258,7 +260,7 @@
         if execute:
             return rosdep.core.create_tempfile_from_string_and_execute(script)
         elif display:
-            print "To install packages: %s would have executed script\n{{{\n%s\n}}}"%(packages_to_install, script)
+            print("To install packages: %s would have executed script\n{{{\n%s\n}}}"%(packages_to_install, script))
         return False
 
 
@@ -333,7 +335,7 @@
         if execute:
             return rosdep.core.create_tempfile_from_string_and_execute(script)
         elif display:
-            print "To install packages: %s would have executed script\n{{{\n%s\n}}}"%(packages_to_install, script)
+            print("To install packages: %s would have executed script\n{{{\n%s\n}}}"%(packages_to_install, script))
         return False
 
 
@@ -351,7 +353,7 @@
         pkg_list = std_out.split('\n')
         for pkg in pkg_list:
             pkg_row = pkg.split("==")
-            print pkg_row
+            print(pkg_row)
             if pkg_row[0] in pkgs:
                 ret_list.append( pkg_row[0])
         return ret_list
@@ -365,6 +367,13 @@
         if type(packages) == type("string"):
             packages = packages.split()
 
+        try:
+            pop = subprocess.Popen(['port'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+        except OSError:
+            import traceback; traceback.print_exc()
+            print("There was an error running macports, make sure it is installed properly.", file=sys.stderr)
+            sys.exit(-1)
+
         self.packages = packages
 
     def get_packages_to_install(self):
@@ -378,12 +387,12 @@
         packages_to_install = self.get_packages_to_install()
         if not packages_to_install:
             script =  "#!/bin/bash\n#No Packages to install"
-        script = "#!/bin/bash\n#Packages %s\nsudo port install "%packages_to_install + ' '.join(packages_to_install)        
+        script = "#!/bin/bash\n#Packages %s\nsudo port install "%packages_to_install + ' '.join(packages_to_install)
 
         if execute:
             return rosdep.core.create_tempfile_from_string_and_execute(script)
         elif display:
-            print "To install packages: %s would have executed script\n{{{\n%s\n}}}"%(packages_to_install, script)
+            print("To install packages: %s would have executed script\n{{{\n%s\n}}}"%(packages_to_install, script))
         return False
 
     def port_detect(self, pkgs):
@@ -401,3 +410,56 @@
             if len(pkg_row) == 3 and pkg_row[0] in pkgs and pkg_row[2] =='(active)':
                 ret_list.append( pkg_row[0])
         return ret_list
+
+class HomebrewInstaller(InstallerAPI):
+    """ 
+    An implementation of the InstallerAPI for use on homebrew systems.
+    """
+    def __init__(self, arg_dict):
+        packages = arg_dict.get("packages", "")
+        if type(packages) == type("string"):
+            packages = packages.split()
+
+        try:
+            pop = subprocess.Popen(['brew'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+        except OSError:
+            import traceback; traceback.print_exc()
+            print("There was an error running brew, make sure it is installed properly.", file=sys.stderr)
+            sys.exit(-1)
+
+        self.packages = packages
+
+    def get_packages_to_install(self):
+        return list(set(self.packages) - set(self.port_detect(self.packages)))
+
+    def check_presence(self):
+        return len(self.get_packages_to_install()) == 0
+
+    def generate_package_install_command(self, default_yes = False, execute = True, display = True):
+        script = '!#/bin/bash\n#no script'
+        packages_to_install = self.get_packages_to_install()
+        if not packages_to_install:
+            script =  "#!/bin/bash\n#No Packages to install"
+        script = "#!/bin/bash\n#Packages %s\nbrew install "%packages_to_install + ' '.join(packages_to_install)
+
+        if execute:
+            return rosdep.core.create_tempfile_from_string_and_execute(script)
+        elif display:
+            print(("To install packages: %s would have executed script\n{{{\n%s\n}}}"%(packages_to_install, script)))
+        return False
+
+    def port_detect(self, pkgs):
+        """ 
+        Given a list of package, return the list of installed packages.
+        """
+        ret_list = []
+        cmd = ['brew', 'list']
+        cmd.extend(pkgs)
+        pop = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+        (std_out, std_err) = pop.communicate()
+        pkg_list = std_out.split()
+        for pkg in pkg_list:
+            if pkg in pkg:
+                ret_list.append(pkg)
+        return ret_list
+
